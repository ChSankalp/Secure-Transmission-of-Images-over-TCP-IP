#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/opencv.hpp>
#include <string.h>
#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/socket.h> 
#include <stdlib.h> 
#include <netinet/in.h> 
#include <string.h>
#include <arpa/inet.h> 
#include <errno.h> 
#include <netdb.h> 
#include <ifaddrs.h>
#define port 8182

using namespace cv;
using namespace std;
//char ip = "172.30.101.142";
Vec3b buf;



unsigned char sbox[256] = {
0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

unsigned char mul2[] =
{
	0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
	0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
	0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
	0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
	0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
	0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
	0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
	0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
	0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
	0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
	0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
	0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
	0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
	0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
	0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
	0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

unsigned char mul3[] =
{
	0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
	0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
	0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
	0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
	0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
	0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
	0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
	0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
	0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
	0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
	0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
	0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
	0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
	0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
	0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
	0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};

unsigned char mainkey[16];
unsigned char roundkeys[10][16];
unsigned char rconkeys[10] = { 0x01, 0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36 };

unsigned char keytemp1[16], keytemp2[4], tmp[16];

void roundkeyexpansion(int roundnum)
{
	int temp = keytemp1[3];
	keytemp1[3] = keytemp1[7];
	keytemp1[7] = keytemp1[11];
	keytemp1[11] = keytemp1[15];
	keytemp1[15] = temp;
	for (int i = 3; i < 16; i = i + 4) {
		keytemp1[i] = sbox[keytemp1[i]];
	}

	keytemp1[3] ^= rconkeys[roundnum];

	for (int i = 0; i < 13; i = i + 4) {
		keytemp1[i] = keytemp1[i + 3] xor keytemp1[i];
	}

	for (int i = 0; i < 13; i = i + 4) {
		keytemp1[i + 1] = keytemp1[i + 1] xor keytemp1[i];
	}
	for (int i = 0; i < 13; i = i + 4) {
		keytemp1[i + 2] ^= keytemp1[i + 1];
	}
	for (int i = 0; i < 4; i = i + 1) {
		keytemp1[(4 * i) + 3] = keytemp1[(4 * i) + 2] xor keytemp2[i];
	}
}

void assignkey() {
	keytemp1[0] = 0x54;
	keytemp1[4] = 0x68;
	keytemp1[8] = 0x61;
	keytemp1[12] = 0x74;
	keytemp1[1] = 0x73;
	keytemp1[5] = 0x20;
	keytemp1[9] = 0x6d;
	keytemp1[13] = 0x79;
	keytemp1[2] = 0x20;
	keytemp1[6] = 0x4b;
	keytemp1[10] = 0x75;
	keytemp1[14] = 0x6e;
	keytemp1[3] = 0x67;
	keytemp1[7] = 0x20;
	keytemp1[11] = 0x46;
	keytemp1[15] = 0x75;
	for (int i = 0; i <= 3; i++)
	{
		keytemp2[i] = keytemp1[4 * i + 3];
	}
}


void assignkey2(int round)
{
	for (int i = 0; i < 4; i = i + 1) {
		for (int j = 0; j < 16; j = j + 4)
		{
			keytemp1[j + i] = roundkeys[round - 1][j + i];
		}
	}
	for (int i = 0; i <= 3; i++)
	{
		keytemp2[i] = keytemp1[4 * i + 3];
	}
}


void addKey(int roundnum) {
	for (int i = 0; i < 4; i = i + 1) {
		for (int j = 0; j < 16; j = j + 4)
		{
			roundkeys[roundnum][j + i] = keytemp1[j + i];
		}
	}
}



void roundkeygen() {
	for (int i = 0; i < 10; i++)
	{
		if (i == 0)
			assignkey();
		else
			assignkey2(i);
		roundkeyexpansion(i);
		addKey(i);
	}
}


int plaintext[16] = {};


void subBytes() {
	for (int i = 0; i < 16; i++)
	{
		plaintext[i] = sbox[plaintext[i]];
	}
}

void shiftRowOnce(int k) {
	int temp = plaintext[k];
	for (int i = k; i < k + 3; i++)
	{
		plaintext[i] = plaintext[i + 1];
	}
	plaintext[k + 3] = temp;
}

void shiftRows() {
	shiftRowOnce(4);
	shiftRowOnce(8); shiftRowOnce(8);
	shiftRowOnce(12); shiftRowOnce(12); shiftRowOnce(12);
}




void mixColumns()
{
	tmp[0] = (unsigned char)mul2[plaintext[0]] ^ mul3[plaintext[4]] ^ plaintext[8] ^ plaintext[12];
	tmp[4] = (unsigned char)plaintext[0] ^ mul2[plaintext[4]] ^ mul3[plaintext[8]] ^ plaintext[12];
	tmp[8] = (unsigned char)plaintext[0] ^ plaintext[4] ^ mul2[plaintext[8]] ^ mul3[plaintext[12]];
	tmp[12] = (unsigned char)mul3[plaintext[0]] ^ plaintext[4] ^ plaintext[8] ^ mul2[plaintext[12]];

	tmp[1] = (unsigned char)mul2[plaintext[1]] ^ mul3[plaintext[5]] ^ plaintext[9] ^ plaintext[13];
	tmp[5] = (unsigned char)plaintext[1] ^ mul2[plaintext[5]] ^ mul3[plaintext[9]] ^ plaintext[13];
	tmp[9] = (unsigned char)plaintext[1] ^ plaintext[5] ^ mul2[plaintext[9]] ^ mul3[plaintext[13]];
	tmp[13] = (unsigned char)mul3[plaintext[1]] ^ plaintext[5] ^ plaintext[9] ^ mul2[plaintext[13]];

	tmp[2] = (unsigned char)mul2[plaintext[2]] ^ mul3[plaintext[6]] ^ plaintext[10] ^ plaintext[14];
	tmp[6] = (unsigned char)plaintext[2] ^ mul2[plaintext[6]] ^ mul3[plaintext[10]] ^ plaintext[14];
	tmp[10] = (unsigned char)plaintext[2] ^ plaintext[6] ^ mul2[plaintext[10]] ^ mul3[plaintext[14]];
	tmp[14] = (unsigned char)mul3[plaintext[2]] ^ plaintext[6] ^ plaintext[10] ^ mul2[plaintext[14]];

	tmp[3] = (unsigned char)mul2[plaintext[3]] ^ mul3[plaintext[7]] ^ plaintext[11] ^ plaintext[15];
	tmp[7] = (unsigned char)plaintext[3] ^ mul2[plaintext[7]] ^ mul3[plaintext[11]] ^ plaintext[15];
	tmp[11] = (unsigned char)plaintext[3] ^ plaintext[7] ^ mul2[plaintext[11]] ^ mul3[plaintext[15]];
	tmp[15] = (unsigned char)mul3[plaintext[3]] ^ plaintext[7] ^ plaintext[11] ^ mul2[plaintext[15]];

	for (int i = 0; i < 16; i++)
		plaintext[i] = tmp[i];
}

void addroundkey(int round) {
	if (round == 0) {
		for (int i = 0; i < 16; i++) {
			plaintext[i] ^= mainkey[i];
		}

	}
	else
	{
		for (int i = 0; i < 16; i++) {
			plaintext[i] ^= roundkeys[round - 1][i];
		}
	}
}
void initialise() {
	
	mainkey[0] = 0x54;
	mainkey[4] = 0x68;
	mainkey[8] = 0x61;
	mainkey[12] = 0x74;
	mainkey[1] = 0x73;
	mainkey[5] = 0x20;
	mainkey[9] = 0x6d;
	mainkey[13] = 0x79;
	mainkey[2] = 0x20;
	mainkey[6] = 0x4b;
	mainkey[10] = 0x75;
	mainkey[14] = 0x6e;
	mainkey[3] = 0x67;
	mainkey[7] = 0x20;
	mainkey[11] = 0x46;
	mainkey[15] = 0x75;
}

void aes_encrypt() {
	addroundkey(0);

	subBytes();
	shiftRows();
	mixColumns();
	addroundkey(1);

	subBytes();
	shiftRows();
	mixColumns();
	addroundkey(2);

	subBytes();
	shiftRows();
	mixColumns();
	addroundkey(3);

	subBytes();
	shiftRows();
	mixColumns();
	addroundkey(4);

	subBytes();
	shiftRows();
	mixColumns();
	addroundkey(5);

	subBytes();
	shiftRows();
	mixColumns();
	addroundkey(6);

	subBytes();
	shiftRows();
	mixColumns();
	addroundkey(7);

	subBytes();
	shiftRows();
	mixColumns();
	addroundkey(8);

	subBytes();
	shiftRows();
	mixColumns();
	addroundkey(9);

	subBytes();
	shiftRows();
	addroundkey(10);
}



vector<int> myvect;

int rows, columns;

void senddata(){
	int sfd = socket(AF_INET,SOCK_STREAM,0);
	if(sfd<0)perror("0");
	struct sockaddr_in addr;
	int addrlen = sizeof(addr);
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = inet_addr("127.0.0.7");
	addr.sin_port = htons(port);
	if(bind(sfd,(struct sockaddr *)&addr,sizeof(addr))<0)
		perror("1");
	listen(sfd,3);
	int nsfd;
	nsfd = accept(sfd,(struct sockaddr *)&addr,(socklen_t*)&addrlen);
	if(nsfd<0){
		perror("2");
	}
	for(int i=0;i<10;i++)cout<<myvect[i]<<" ";
		cout<<endl;

	int cnt = 0;
	int size = myvect.size();
	send(nsfd,&size,sizeof(size),0);
	send(nsfd,&rows,sizeof(rows),0);
	send(nsfd,&columns,sizeof(columns),0);
	while(cnt<myvect.size()){
		int a[5000]={0};
		int d = 0;
		for(int i=0;i<5000;i++){
			if(cnt>=myvect.size()){i=50005;continue;}	
			a[i] = myvect[cnt++];
		}
		send(nsfd,a,sizeof(a),0);
	}
	cout<<myvect.size()<<endl;
}

int main() {
	roundkeygen();
	Mat image = imread("image1.jpg");
	rows = image.rows;
	columns = image.cols;
	cout<<"Image Height - "<<rows<<"\nImage Width - "<<columns<<"\n";
	cout << "\n\nEncryption Started\n\n";
	for (int i = 0; i < image.rows; i++)
	{
		for (int j = 0; j < image.cols; j++) {
			buf = image.at<Vec3b>(i, j);
			myvect.push_back(buf[0]);
			myvect.push_back(buf[1]);
			myvect.push_back(buf[2]);

		}
	}
	if (myvect.size() % 4 == 0)
	{
		for (int i = 0; i < myvect.size() / 16; i++) {
			for (int j = i * 16; j < (i * 16) + 16; j++)
			{
				plaintext[j % 16] = myvect[j];
			}
			aes_encrypt();
			for (int j = i * 16; j < (i * 16) + 16; j++)
			{
				myvect[j] = plaintext[j % 16];
			}
		}
	}

	
	for (int i = 0; i < image.rows*image.cols; i = i + 1)
	{
		buf[0] = myvect[i*3];
		buf[1] = myvect[(i*3) + 1];
		buf[2] = myvect[(i * 3) + 2];
		
		image.at<Vec3b>(i / image.cols, i%image.cols) = buf;
	}


	cout << "\n\nEncryption Finished\n\n";
	namedWindow("Encrypted Image", WINDOW_GUI_NORMAL);
	imshow("Encrypted Image", image);
	senddata();

	waitKey(0);

}
